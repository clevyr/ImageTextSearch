@page "/tags"

@using ImageTextSearch.Data
@using ImageTextSearch.Models
@inject TagService TagService

<h1>Tags</h1>

@if (tags == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tag</th>
                <th>Count</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in tags.OrderByDescending(x => x.ImageTags.Count))
            {
                <tr>
                    <td><NavLink href=@("/images/" + @tag.Text)>@tag.Text</NavLink></td>
                    <td>@tag.ImageTags.Count</td>
                    <td> <button class="btn btn-danger" @onclick="@( async () => await DeleteTag(tag))">Delete</button></td>
</tr>
            }
        </tbody>
    </table>

    <input type="text" @bind="Text" />

    <button @onclick="CreateTag" class="btn btn-primary">Create New Tag</button>
}

@code {
  List<Tag> tags;
  string Text;
  protected override void OnInitialized()
  {
      tags = TagService.GetAll();
  }
  async Task CreateTag()
  {
      var newTag = new Tag
      {
          Text = Text
      };

      await TagService.CreateAsync(newTag);
      tags.Add(newTag);
      this.StateHasChanged();
  }

  async Task DeleteTag(Tag tag)
  {

    await TagService.DeleteAsync(tag);
    tags.Remove(tag);
    this.StateHasChanged();
  }

}
